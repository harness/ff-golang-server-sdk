// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check the value of a flag
	// (POST /check_flag)
	GetFlagValue(ctx echo.Context) error
	// Check the system is up
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFlagValue converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlagValue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlagValue(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/check_flag", wrapper.GetFlagValue)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/bOBD9K8TsHrWWvUEvOqUfcRvk0CBJ20MQGLQ0lplIJEOO7BqB/3vBoeNYHyl8",
	"SC+92eTMvMc3b0ZPkJvaGo2aPGRP4PMl1pJ/njln3BV6a7THcFCgz52ypIyGLF6La5LUeLEwTqydtBYd",
	"JGCdsehIIdfBEDir0XtZch3aWIQMPDmlS9huE3D42CiHBWS3nfC75DnczO8xJ9gmMK1k+XGJ+cMHU2z6",
	"xK7wsUFPgozIQ5RYVLIUSovrTxc9cuFu9oBcBn/K2lYBq97M9hdJl2+yS1K6aGfde6OHwkm6EinEtrEl",
	"kVPzhuK/jmi1VFWnvNR4uvs7yk09BOWwZBEO886aUHkouvHotKyxj9OP3g40Ij5spgrUpBYKXbvQ7nry",
	"uiazPvoNX4jJMQw6zjlo2UuHfmug1939fBNcxP6JVjrCRcNuWcmqOcL83SfEtKE3XBpdHkf/MgB1GVuj",
	"ywM6c2MqlLrHh8P68CFM6YUJFXKjSeZ0YFrIF6dL6TR6P1IGEohdhilKahyKIL/4TxS4wipw8pBA40Li",
	"ksj6LE3X6/XooELovCK2x5d4GrogbsKU/4hbR7y/PIcEVuh8VGAyGo/GIdNY1NIqyOCEjxKwkpYsQspN",
	"5VGPmnh+RuAkg5DnBWTwGSkQ/s6diOqgp+fVE16PmtOktZXKOTHlVbBfp+HXvw4XkME/6cu+TXfLNm0v",
	"tG27CeQa5IPYUSb+/3j89uB7NzGBtp++XgQp370hbPvrMgDJARH1pG/wa3QrlaP4puVKqkrOK2Tz+qau",
	"pdtABvwmQUsUPETCLITkUea41Ko4ALvN3O75bmT+mOat4f3b5PYbT1gL5UVjI5JHFwYTsttuXW3E0ngS",
	"3mIeviDFfhWk0qp0wiPcTZpOW6PfXh9ZmlYml1Uom52Mx5OXQnfbXwEAAP//7YR9Tu4IAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
