// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rest

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for FeatureConfigKind.
const (
	FeatureConfigKindBoolean FeatureConfigKind = "boolean"
	FeatureConfigKindInt     FeatureConfigKind = "int"
	FeatureConfigKindJson    FeatureConfigKind = "json"
	FeatureConfigKindString  FeatureConfigKind = "string"
)

// Defines values for FeatureState.
const (
	FeatureStateOff FeatureState = "off"
	FeatureStateOn  FeatureState = "on"
)

// Defines values for MetricsDataMetricsType.
const (
	MetricsDataMetricsTypeFFMETRICS MetricsDataMetricsType = "FFMETRICS"
)

// AuthenticationRequest defines model for AuthenticationRequest.
type AuthenticationRequest struct {
	ApiKey string `json:"apiKey"`
	Target *struct {
		Anonymous  *bool                   `json:"anonymous,omitempty"`
		Attributes *map[string]interface{} `json:"attributes,omitempty"`
		Identifier string                  `json:"identifier"`
		Name       *string                 `json:"name,omitempty"`
	} `json:"target,omitempty"`
}

// AuthenticationResponse defines model for AuthenticationResponse.
type AuthenticationResponse struct {
	AuthToken string `json:"authToken"`
}

// Clause A clause describes what conditions are used to evaluate a flag
type Clause struct {
	// Attribute The attribute to use in the clause.  This can be any target attribute
	Attribute string `json:"attribute"`

	// Id The unique ID for the clause
	Id *string `json:"id,omitempty"`

	// Negate Is the operation negated?
	Negate bool `json:"negate"`

	// Op The type of operation such as equals, starts_with, contains
	Op string `json:"op"`

	// Values The values that are compared against the operator
	Values []string `json:"values"`
}

// Distribution Describes a distribution rule
type Distribution struct {
	// BucketBy The attribute to use when distributing targets across buckets
	BucketBy string `json:"bucketBy"`

	// Variations A list of variations and the weight that should be given to each
	Variations []WeightedVariation `json:"variations"`
}

// Error defines model for Error.
type Error struct {
	// Code The http error code
	Code string `json:"code"`

	// Details Additional details about the error
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message The reason the request failed
	Message string `json:"message"`
}

// Evaluation defines model for Evaluation.
type Evaluation struct {
	Flag       string  `json:"flag"`
	Identifier *string `json:"identifier,omitempty"`
	Kind       string  `json:"kind"`
	Value      string  `json:"value"`
}

// Evaluations defines model for Evaluations.
type Evaluations []Evaluation

// FeatureConfig defines model for FeatureConfig.
type FeatureConfig struct {
	// DefaultServe Describe the distribution rule and the variation that should be served to the target
	DefaultServe  Serve             `json:"defaultServe"`
	Environment   string            `json:"environment"`
	Feature       string            `json:"feature"`
	Kind          FeatureConfigKind `json:"kind"`
	OffVariation  string            `json:"offVariation"`
	Prerequisites *[]Prerequisite   `json:"prerequisites,omitempty"`
	Project       string            `json:"project"`
	Rules         *[]ServingRule    `json:"rules,omitempty"`

	// State The state of a flag either off or on
	State                FeatureState    `json:"state"`
	VariationToTargetMap *[]VariationMap `json:"variationToTargetMap,omitempty"`
	Variations           []Variation     `json:"variations"`
	Version              *int64          `json:"version,omitempty"`
}

// FeatureConfigKind defines model for FeatureConfig.Kind.
type FeatureConfigKind string

// FeatureState The state of a flag either off or on
type FeatureState string

// GroupServingRule The rule used to determine what variation to serve to a target
type GroupServingRule struct {
	// Clauses A list of clauses to use in the rule
	Clauses []Clause `json:"clauses"`

	// Priority The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest
	Priority int `json:"priority"`

	// RuleId The unique identifier for this rule
	RuleId string `json:"ruleId"`
}

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Metrics defines model for Metrics.
type Metrics struct {
	MetricsData *[]MetricsData `json:"metricsData,omitempty"`
	TargetData  *[]TargetData  `json:"targetData,omitempty"`
}

// MetricsData defines model for MetricsData.
type MetricsData struct {
	Attributes []KeyValue `json:"attributes"`
	Count      int        `json:"count"`

	// MetricsType This can be of type FeatureMetrics
	MetricsType MetricsDataMetricsType `json:"metricsType"`

	// Timestamp time at when this data was recorded
	Timestamp int64 `json:"timestamp"`
}

// MetricsDataMetricsType This can be of type FeatureMetrics
type MetricsDataMetricsType string

// Pagination defines model for Pagination.
type Pagination struct {
	// ItemCount The total number of items
	ItemCount int `json:"itemCount"`

	// PageCount The total number of pages
	PageCount int `json:"pageCount"`

	// PageIndex The current page
	PageIndex int `json:"pageIndex"`

	// PageSize The number of items per page
	PageSize int `json:"pageSize"`

	// Version The version of this object.  The version will be incremented each time the object is modified
	Version *int `json:"version,omitempty"`
}

// Prerequisite Feature Flag pre-requisites
type Prerequisite struct {
	// Feature The feature identifier that is the prerequisite
	Feature string `json:"feature"`

	// Variations A list of variations that must be met
	Variations []string `json:"variations"`
}

// ProxyConfig defines model for ProxyConfig.
type ProxyConfig struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Environments *[]struct {
		ApiKeys        *[]string        `json:"apiKeys,omitempty"`
		FeatureConfigs *[]FeatureConfig `json:"featureConfigs,omitempty"`
		Id             *string          `json:"id,omitempty"`
		Segments       *[]Segment       `json:"segments,omitempty"`
	} `json:"environments,omitempty"`
}

// Segment A Target Group (Segment) response
type Segment struct {
	// CreatedAt The data and time in milliseconds when the group was created
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// Environment The environment this target group belongs to
	Environment *string `json:"environment,omitempty"`

	// Excluded A list of Targets who are excluded from this target group
	Excluded *[]Target `json:"excluded,omitempty"`

	// Identifier Unique identifier for the target group.
	Identifier string `json:"identifier"`

	// Included A list of Targets who belong to this target group
	Included *[]Target `json:"included,omitempty"`

	// ModifiedAt The data and time in milliseconds when the group was last modified
	ModifiedAt *int64 `json:"modifiedAt,omitempty"`

	// Name Name of the target group.
	Name  string    `json:"name"`
	Rules *[]Clause `json:"rules,omitempty"`

	// ServingRules An array of rules that can cause a user to be included in this segment.
	ServingRules *[]GroupServingRule `json:"servingRules,omitempty"`

	// Tags Tags for this target group
	Tags *[]Tag `json:"tags,omitempty"`

	// Version The version of this group.  Each time it is modified the version is incremented
	Version *int64 `json:"version,omitempty"`
}

// Serve Describe the distribution rule and the variation that should be served to the target
type Serve struct {
	// Distribution Describes a distribution rule
	Distribution *Distribution `json:"distribution,omitempty"`
	Variation    *string       `json:"variation,omitempty"`
}

// ServingRule The rule used to determine what variation to serve to a target
type ServingRule struct {
	// Clauses A list of clauses to use in the rule
	Clauses []Clause `json:"clauses"`

	// Priority The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest
	Priority int `json:"priority"`

	// RuleId The unique identifier for this rule
	RuleId *string `json:"ruleId,omitempty"`

	// Serve Describe the distribution rule and the variation that should be served to the target
	Serve Serve `json:"serve"`
}

// Tag A Tag object used to tag feature flags - consists of name and identifier
type Tag struct {
	// Identifier The identifier of the tag
	Identifier string `json:"identifier"`

	// Name The name of the tag
	Name string `json:"name"`
}

// Target A Target object
type Target struct {
	// Account The account ID that the target belongs to
	Account string `json:"account"`

	// Anonymous Indicates if this target is anonymous
	Anonymous *bool `json:"anonymous,omitempty"`

	// Attributes a JSON representation of the attributes for this target
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// CreatedAt The date and time in milliseconds when this Target was created
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// Environment The identifier for the environment that the target belongs to
	Environment string `json:"environment"`

	// Identifier The unique identifier for this target
	Identifier string `json:"identifier"`

	// Name The name of this Target
	Name string `json:"name"`

	// Org The identifier for the organization that the target belongs to
	Org string `json:"org"`

	// Project The identifier for the project that this target belongs to
	Project string `json:"project"`

	// Segments A list of Target Groups (Segments) that this Target belongs to
	Segments *[]Segment `json:"segments,omitempty"`
}

// TargetData defines model for TargetData.
type TargetData struct {
	Attributes []KeyValue `json:"attributes"`
	Identifier string     `json:"identifier"`
	Name       string     `json:"name"`
}

// TargetMap Target map provides the details of a target that belongs to a flag
type TargetMap struct {
	// Identifier The identifier for the target
	Identifier string `json:"identifier"`

	// Name The name of the target
	Name string `json:"name"`
}

// Variation A variation of a flag that can be returned to a target
type Variation struct {
	// Description A description of the variation
	Description *string `json:"description,omitempty"`

	// Identifier The unique identifier for the variation
	Identifier string `json:"identifier"`

	// Name The user friendly name of the variation
	Name *string `json:"name,omitempty"`

	// Value The variation value to serve such as true or false for a boolean flag
	Value string `json:"value"`
}

// VariationMap A mapping of variations to targets and target groups (segments).  The targets listed here should receive this variation.
type VariationMap struct {
	// TargetSegments A list of target groups (segments)
	TargetSegments *[]string `json:"targetSegments,omitempty"`

	// Targets A list of target mappings
	Targets *[]TargetMap `json:"targets,omitempty"`

	// Variation The variation identifier
	Variation string `json:"variation"`
}

// WeightedVariation A variation and the weighting it should receive as part of a percentage rollout
type WeightedVariation struct {
	// Variation The variation identifier
	Variation string `json:"variation"`

	// Weight The weight to be given to the variation in percent
	Weight int `json:"weight"`
}

// ClusterQueryOptionalParam defines model for clusterQueryOptionalParam.
type ClusterQueryOptionalParam string

// EnvironmentPathParam defines model for environmentPathParam.
type EnvironmentPathParam string

// PageNumber defines model for pageNumber.
type PageNumber int

// PageSize defines model for pageSize.
type PageSize int

// BadRequest defines model for BadRequest.
type BadRequest Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// NotFound defines model for NotFound.
type NotFound Error

// ProxyConfigResponse TBD
type ProxyConfigResponse ProxyConfig

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated Error

// Unauthorized defines model for Unauthorized.
type Unauthorized Error

// GetFeatureConfigParams defines parameters for GetFeatureConfig.
type GetFeatureConfigParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// GetFeatureConfigByIdentifierParams defines parameters for GetFeatureConfigByIdentifier.
type GetFeatureConfigByIdentifierParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// GetAllSegmentsParams defines parameters for GetAllSegments.
type GetAllSegmentsParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// GetSegmentByIdentifierParams defines parameters for GetSegmentByIdentifier.
type GetSegmentByIdentifierParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// GetEvaluationsParams defines parameters for GetEvaluations.
type GetEvaluationsParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// GetEvaluationByIdentifierParams defines parameters for GetEvaluationByIdentifier.
type GetEvaluationByIdentifierParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// PostMetricsParams defines parameters for PostMetrics.
type PostMetricsParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
}

// AuthenticateProxyKeyJSONBody defines parameters for AuthenticateProxyKey.
type AuthenticateProxyKeyJSONBody struct {
	ProxyKey string `json:"proxyKey"`
}

// GetProxyConfigParams defines parameters for GetProxyConfig.
type GetProxyConfigParams struct {
	// PageNumber PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Environment Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key.
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`

	// Key Accpets a Proxy Key.
	Key string `form:"key" json:"key"`
}

// StreamParams defines parameters for Stream.
type StreamParams struct {
	// Cluster Unique identifier for the cluster for the account
	Cluster *ClusterQueryOptionalParam `form:"cluster,omitempty" json:"cluster,omitempty"`
	APIKey  string                     `json:"API-Key"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody AuthenticationRequest

// PostMetricsJSONRequestBody defines body for PostMetrics for application/json ContentType.
type PostMetricsJSONRequestBody Metrics

// AuthenticateProxyKeyJSONRequestBody defines body for AuthenticateProxyKey for application/json ContentType.
type AuthenticateProxyKeyJSONRequestBody AuthenticateProxyKeyJSONBody
